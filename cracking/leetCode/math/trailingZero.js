/**
 This seems long but just read on.

The number of 0s in n! is the number of 10s that can be generated by numbers
from 1 to n!. 10 is a product of 2 and 5, so we just need to check
how many 2x5 are present in n!

If n = 5, then n! = 1x2x3x4x5. There is one 2 and 5 pair present
in 5! which can make one 10. So numbers of 0s in 5! is one.

If n = 10, then n! = 1x2x3x4x5x6x7x8x9x10 => this would have two zeros one from the
2x5 and one from another 2x5 in 10.

If n = 15, then n! = 1x2x3x4x5x6x7x8x9x10x11x12x13x14x15 => this would have three
zeros one from the 2x5 and one from another 2x5 in 10 and one from a 5 in 15 which
would give us a 0 by multiplying with any 2 from any even num from 1 to 15.

Since there are a lot more 2s than 5s in any n!, we just need to find the
number of 5s in n! and that will be the answer. Eg.

5! -> one 0 as there is only one 5 from 1 to 5.
10! -> two 0s as there are two 5s from 1 to 10.
15! -> three 0s as there are three 5s from 1 to 10.
20! -> four 0s as there are four 5s from 1 to 10.

How to quickly count number of 5s in n!? Use n/5.
Assume n = 15, using n / 5 we get 3, this tells us that there are at least
three multiples of 5 present in numbers from 1 to 15 namely
5x1 = 5, 5x2 = 10 and 5x3 = 15.
So, we can get the number of 5s in n! and hence the number of 0s in n! using n / 5.

But there is still one issue for numbers like 25, 125,
625, which contain more than one 5 as their factor.

Eg. for 25!, the number of 0s is = number of 0s in 20! + number of 0s which can be generated from 21 to 25
= number of 0s in 20! + two 0s as there are two 5s present in 25 which would
multiple with any two 2s and make a 100 and give us 2 zeros.
= so 25! has six 0s.

But, going by the original formula we will calculate number of 0s in 25! as
25/5 which is 5. So five 0s.
Now, what we need to do is just divide this result of 5 again by 5
which gives us a 1 and add it to previous five 0s

Intuition: Keep dividing by 5 and adding the result to number of 0s.
 */


/**
 * @param {number} n
 * @return {number}
 */
var trailingZeroes = function(n) {  
    return factor(n);
};

const factor = (n) => {
    if(n === 0) {
        return 0;
    }   
 
    return Math.floor(n/5) + factor(n/5);
}